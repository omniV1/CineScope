@page "/register"
@using CineScope.Client.Services
@using CineScope.Client.Services.Auth
@using CineScope.Shared.Auth
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject RecaptchaService RecaptchaService
@inject IJSRuntime JSRuntime

<PageTitle>CineScope - Register</PageTitle>

<div class="auth-container">
    <MudPaper Elevation="0" Class="auth-box">
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudText Typo="Typo.h4" Class="mb-4" Align="Align.Center">Create Account</MudText>
            <MudText Typo="Typo.subtitle2" Color="Color.Surface" Class="mb-6" Align="Align.Center">Join the CineScope community</MudText>

            <MudTextField T="string" 
                        Label="Username" 
                        @bind-Value="registerRequest.Username"
                        Required="true" 
                        RequiredError="Username is required"
                        Validation="@(new Func<string, IEnumerable<string>>(ValidateUsername))"
                        Variant="Variant.Outlined" 
                        Class="mb-4" />

            <MudTextField T="string" 
                        Label="Email" 
                        @bind-Value="registerRequest.Email"
                        Required="true" 
                        RequiredError="Email is required"
                        Validation="@(new Func<string, IEnumerable<string>>(ValidateEmail))"
                        Variant="Variant.Outlined" 
                        Class="mb-4" />

            <MudTextField T="string" 
                        Label="Password" 
                        @bind-Value="registerRequest.Password"
                        Required="true" 
                        RequiredError="Password is required"
                        Validation="@(new Func<string, IEnumerable<string>>(ValidatePassword))"
                        Variant="Variant.Outlined" 
                        InputType="InputType.Password"
                        Class="mb-4" />

            <MudTextField T="string" 
                        Label="Confirm Password" 
                        @bind-Value="registerRequest.ConfirmPassword"
                        Required="true" 
                        RequiredError="Please confirm your password"
                        Validation="@(new Func<string, IEnumerable<string>>(ValidateConfirmPassword))"
                        Variant="Variant.Outlined" 
                        InputType="InputType.Password"
                        Class="mb-4" />

            <div id="registerRecaptcha" class="mb-4"></div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4" Dense="true">@errorMessage</MudAlert>
            }

            <MudButton Variant="Variant.Filled" 
                    Color="Color.Error" 
                    FullWidth="true" 
                    Size="Size.Large"
                    Disabled="@(!success || isLoading)"
                    OnClick="HandleRegister"
                    Class="mb-4">
                @if (isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Creating account...</MudText>
                }
                else
                {
                    <MudText>Register</MudText>
                }
            </MudButton>

            <MudText Align="Align.Center">
                Already have an account? <MudLink Href="/login" Color="Color.Error">Login here</MudLink>
            </MudText>
        </MudForm>
    </MudPaper>
</div>

<link href="css/auth.css" rel="stylesheet" />

@code {
    private MudForm form;
    private bool success;
    private string[] errors = { };
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    /// <summary>
    /// Model for the registration form.
    /// </summary>
    private RegisterRequest registerRequest = new RegisterRequest();

    protected override void OnInitialized()
    {
        // Clear any existing error message when the page loads
        errorMessage = string.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("initializeRecaptcha", "registerRecaptcha");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"reCAPTCHA initialization error: {ex.Message}");
            }
        }
    }

    /// <summary>
    /// Validates the username field.
    /// Ensures username meets length requirements.
    /// </summary>
    private IEnumerable<string> ValidateUsername(string username)
    {
        if (string.IsNullOrWhiteSpace(username))
            yield return "Username is required";
        else if (username.Length < 3)
            yield return "Username must be at least 3 characters";
        else if (username.Length > 50)
            yield return "Username cannot exceed 50 characters";
    }

    /// <summary>
    /// Validates the email field.
    /// Ensures email format is valid.
    /// </summary>
    private IEnumerable<string> ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            yield return "Email is required";
        else if (!System.Text.RegularExpressions.Regex.IsMatch(email,
                @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
            yield return "Invalid email format";
    }

    /// <summary>
    /// Validates the password field.
    /// Ensures password meets complexity requirements.
    /// </summary>
    private IEnumerable<string> ValidatePassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
            yield return "Password is required";
        else if (password.Length < 6)
            yield return "Password must be at least 6 characters";
    }

    /// <summary>
    /// Validates the confirm password field.
    /// Ensures it matches the password field.
    /// </summary>
    private IEnumerable<string> ValidateConfirmPassword(string confirmPassword)
    {
        if (string.IsNullOrWhiteSpace(confirmPassword))
            yield return "Please confirm your password";
        else if (confirmPassword != registerRequest.Password)
            yield return "Passwords do not match";
    }

    /// <summary>
    /// Handles the registration form submission.
    /// Uses the AuthService for user registration.
    /// </summary>
    private async Task HandleRegister()
    {
        // Validate the form
        await form.Validate();

        if (!success)
        {
            return;
        }

        try
        {
            // Set loading state
            isLoading = true;
            errorMessage = string.Empty;

            // Execute reCAPTCHA verification
            var recaptchaToken = await RecaptchaService.ExecuteRecaptchaAsync("register");
            var isVerified = await RecaptchaService.VerifyTokenAsync(recaptchaToken, "register");

            if (!isVerified)
            {
                errorMessage = "Security verification failed. Please try again.";
                Snackbar.Add(errorMessage, Severity.Error);
                return;
            }

            // Use the AuthService to register the user
            var result = await AuthService.Register(registerRequest);

            if (result.Success)
            {
                // Show success message
                Snackbar.Add("Registration successful! Welcome to CineScope.", Severity.Success);

                // Redirect to home page
                NavigationManager.NavigateTo("/");
            }
            else
            {
                // Handle error response
                errorMessage = result.Message ?? "Registration failed. Please try again.";
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
            errorMessage = "An error occurred during registration. Please try again.";
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            // Reset loading state
            isLoading = false;
        }
    }
}