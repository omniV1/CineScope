@page "/debug"
@using System.Net.Http.Json
@using System.Text.Json
@using CineScope.Shared.Models
@using CineScope.Client.Helpers
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h1 class="text-center my-4">Authentication Debugging</h1>

<div class="container">
    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Login Test</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="loginUsername" class="form-label">Username</label>
                        <input id="loginUsername" @bind="loginUsername" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="loginPassword" class="form-label">Password</label>
                        <input type="password" id="loginPassword" @bind="loginPassword" class="form-control" />
                    </div>
                    <button @onclick="TestLogin" class="btn btn-primary w-100" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span>Loading...</span>
                        }
                        else
                        {
                            <span>Test Login</span>
                        }
                    </button>
                </div>
                <div class="card-footer @(loginSuccess ? "bg-success text-white" : "bg-danger text-white")">
                    <pre style="white-space: pre-wrap; overflow-wrap: break-word;">@loginResult</pre>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Register Test</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="registerUsername" class="form-label">Username</label>
                        <input id="registerUsername" @bind="registerUsername" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="registerEmail" class="form-label">Email</label>
                        <input id="registerEmail" @bind="registerEmail" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="registerPassword" class="form-label">Password</label>
                        <input type="password" id="registerPassword" @bind="registerPassword" class="form-control" />
                    </div>
                    <button @onclick="TestRegister" class="btn btn-primary w-100" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span>Loading...</span>
                        }
                        else
                        {
                            <span>Test Register</span>
                        }
                    </button>
                </div>
                <div class="card-footer @(registerSuccess ? "bg-success text-white" : "bg-danger text-white")">
                    <pre style="white-space: pre-wrap; overflow-wrap: break-word;">@registerResult</pre>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">Raw API Request Information</h5>
                </div>
                <div class="card-body">
                    <pre style="white-space: pre-wrap; overflow-wrap: break-word;">@apiRequestInfo</pre>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">Check Database Connection</h5>
                </div>
                <div class="card-body">
                    <button @onclick="CheckDatabaseConnection" class="btn btn-info">Check MongoDB Connection</button>
                    <div class="mt-3">
                        <pre style="white-space: pre-wrap; overflow-wrap: break-word;">@dbConnectionResult</pre>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-warning text-dark">
                    <h5 class="mb-0">Account Management</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="unlockUsername" class="form-label">Username to Unlock</label>
                        <input id="unlockUsername" @bind="unlockUsername" class="form-control" />
                    </div>
                    <div class="d-flex gap-2 mb-3">
                        <button @onclick="UnlockAccount" class="btn btn-warning">Unlock Account</button>
                        <button @onclick="UnlockAdminAccount" class="btn btn-danger">Quick Unlock Admin</button>
                    </div>
                    <div class="mt-3">
                        <pre style="white-space: pre-wrap; overflow-wrap: break-word;">@unlockResult</pre>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4 mb-5">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">Password Hash Tester</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="testPassword" class="form-label">Test Password</label>
                        <input id="testPassword" @bind="testPassword" class="form-control" />
                    </div>
                    <button @onclick="TestPasswordHash" class="btn btn-info">Generate Hash</button>
                    <div class="mt-3">
                        <pre style="white-space: pre-wrap; overflow-wrap: break-word;">@passwordHashResult</pre>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string loginUsername = "";
    private string loginPassword = "";
    private string loginResult = "";
    private bool loginSuccess = false;
    
    private string registerUsername = "";
    private string registerEmail = "";
    private string registerPassword = "";
    private string registerResult = "";
    private bool registerSuccess = false;
    
    private string apiRequestInfo = "";
    private string dbConnectionResult = "";
    private bool isLoading = false;
    
    private string unlockUsername = "";
    private string unlockResult = "";
    private string testPassword = "";
    private string passwordHashResult = "";
    private bool firstRender = true;
    
    protected override async Task OnInitializedAsync()
    {
        // Use the helper to ensure proper initialization without JS calls
        await BlazorInitHelper.EnsureInitialized(JSRuntime, "Debug Page", false);
        
        // Optionally check database connection automatically on page load
        try
        {
            dbConnectionResult = "Checking database connection on page load...";
            var response = await Http.GetAsync("api/users/check-db-connection");
            var content = await response.Content.ReadAsStringAsync();
            dbConnectionResult = $"Status: {response.StatusCode}\n\n{content}";
            
            // Force a render
            StateHasChanged();
        }
        catch (Exception ex)
        {
            dbConnectionResult = $"Error checking connection: {ex.Message}";
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.firstRender = false;
            
            try
            {
                // Now it's safe to make JS calls
                await JSRuntime.InvokeVoidAsync("console.log", "Debug page initialized and rendered");
                
                // Add a message to the UI about admin account
                apiRequestInfo = "Use the 'Quick Unlock Admin' button to unlock the admin account and then try logging in with username 'admin' and password 'admin123'.";
                
                // Force a render to update UI
                StateHasChanged();
            }
            catch (Exception)
            {
                // Silently catch any errors
            }
        }
    }
    
    private async Task TestLogin()
    {
        try
        {
            isLoading = true;
            loginResult = "Sending request...";
            
            var loginData = new { Username = loginUsername, Password = loginPassword };
            var jsonContent = new StringContent(
                JsonSerializer.Serialize(loginData),
                System.Text.Encoding.UTF8,
                "application/json");
            
            // Log request details
            apiRequestInfo = $"REQUEST: POST api/users/login\nPayload: {JsonSerializer.Serialize(loginData, new JsonSerializerOptions { WriteIndented = true })}";
            
            var response = await Http.PostAsync("api/users/login", jsonContent);
            var content = await response.Content.ReadAsStringAsync();
            
            // Format the JSON if possible
            try {
                var jsonDoc = JsonDocument.Parse(content);
                content = JsonSerializer.Serialize(jsonDoc, new JsonSerializerOptions { WriteIndented = true });
            } catch { /* If it's not valid JSON, keep the original content */ }
            
            loginResult = $"Status: {response.StatusCode}\n\n{content}";
            loginSuccess = response.IsSuccessStatusCode;
            
            // Update API info
            apiRequestInfo += $"\n\nRESPONSE: {response.StatusCode}\n{content}";
        }
        catch (Exception ex)
        {
            loginResult = $"Error: {ex.Message}";
            loginSuccess = false;
            apiRequestInfo += $"\n\nERROR: {ex.Message}\n{ex.StackTrace}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task TestRegister()
    {
        try
        {
            isLoading = true;
            registerResult = "Sending request...";
            
            var registerData = new { 
                Username = registerUsername, 
                Email = registerEmail, 
                Password = registerPassword,
                ConfirmPassword = registerPassword  // Adding this in case it's required
            };
            
            var jsonContent = new StringContent(
                JsonSerializer.Serialize(registerData),
                System.Text.Encoding.UTF8,
                "application/json");
            
            // Log request details
            apiRequestInfo = $"REQUEST: POST api/users/register\nPayload: {JsonSerializer.Serialize(registerData, new JsonSerializerOptions { WriteIndented = true })}";
            
            var response = await Http.PostAsync("api/users/register", jsonContent);
            var content = await response.Content.ReadAsStringAsync();
            
            // Format the JSON if possible
            try {
                var jsonDoc = JsonDocument.Parse(content);
                content = JsonSerializer.Serialize(jsonDoc, new JsonSerializerOptions { WriteIndented = true });
            } catch { /* If it's not valid JSON, keep the original content */ }
            
            registerResult = $"Status: {response.StatusCode}\n\n{content}";
            registerSuccess = response.IsSuccessStatusCode;
            
            // Update API info
            apiRequestInfo += $"\n\nRESPONSE: {response.StatusCode}\n{content}";
        }
        catch (Exception ex)
        {
            registerResult = $"Error: {ex.Message}";
            registerSuccess = false;
            apiRequestInfo += $"\n\nERROR: {ex.Message}\n{ex.StackTrace}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task CheckDatabaseConnection()
    {
        try
        {
            isLoading = true;
            dbConnectionResult = "Checking database connection...";
            
            var response = await Http.GetAsync("api/users/check-db-connection");
            var content = await response.Content.ReadAsStringAsync();
            
            dbConnectionResult = $"Status: {response.StatusCode}\n\n{content}";
        }
        catch (Exception ex)
        {
            dbConnectionResult = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task UnlockAccount()
    {
        try
        {
            isLoading = true;
            unlockResult = "Unlocking account...";
            
            var response = await Http.PostAsync($"api/users/unlock-account?username={Uri.EscapeDataString(unlockUsername)}", null);
            var content = await response.Content.ReadAsStringAsync();
            
            unlockResult = $"Status: {response.StatusCode}\n\n{content}";
        }
        catch (Exception ex)
        {
            unlockResult = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task UnlockAdminAccount()
    {
        try
        {
            isLoading = true;
            unlockResult = "Unlocking admin account...";
            
            var response = await Http.PostAsync("api/users/unlock-account?username=admin", null);
            var content = await response.Content.ReadAsStringAsync();
            
            unlockResult = $"Status: {response.StatusCode}\n\n{content}";
            
            // If successful, show a message
            if (response.IsSuccessStatusCode)
            {
                apiRequestInfo = "Admin account has been unlocked. You can now try logging in with username 'admin' and password 'admin123'.";
            }
        }
        catch (Exception ex)
        {
            unlockResult = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task TestPasswordHash()
    {
        try
        {
            isLoading = true;
            passwordHashResult = "Generating hash...";
            
            var response = await Http.GetAsync($"api/users/hash-password?password={Uri.EscapeDataString(testPassword)}");
            var content = await response.Content.ReadAsStringAsync();
            
            passwordHashResult = $"Status: {response.StatusCode}\n\n{content}";
        }
        catch (Exception ex)
        {
            passwordHashResult = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
} 