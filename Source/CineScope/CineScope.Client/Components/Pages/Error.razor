@page "/Error"  // Defines the route URL for this page
@using System.Diagnostics  // Needed for the Activity class

<PageTitle>Error</PageTitle>  // Sets the browser tab title

<!-- Main error heading with red text -->
<h1 class="text-danger">Error.</h1>

<!-- Subheading explains that an error occurred -->
<h2 class="text-danger">An error occurred while processing your request.</h2>

<!-- Only display the Request ID section if a Request ID is available -->
@if (ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@RequestId</code>  <!-- Display the request ID in a code block for clarity -->
    </p>
}

<!-- Development environment information section -->
<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <!-- Security warning about not using Development mode in production -->
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>

@code {
    // Property to store the unique request identifier
    private string? RequestId { get; set; }

    // Computed property that returns true only if RequestId has a value
    private bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

    // Lifecycle method that runs when the component is first initialized
    protected override void OnInitialized()
    {
        // Sets RequestId to either the current Activity ID (if available) or generates a new GUID
        // This ensures each error has a unique identifier for troubleshooting
        RequestId = Activity.Current?.Id ?? Guid.NewGuid().ToString();
    }
}