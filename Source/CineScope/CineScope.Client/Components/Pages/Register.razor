@page "/register"
@using CineScope.Client.ClientServices
@using CineScope.Shared.Models
@using CineScope.Client.Helpers
@inject UserClientService UserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="auth-container">
    <div class="auth-card">
        <div class="auth-header">
            <h3>CINESCOPE</h3>
            <p>Create your account</p>
        </div>
        <div class="auth-body">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            @if (registrationSuccess)
            {
                <div class="alert alert-success">
                    <h4>Registration Successful!</h4>
                    <p>Your account has been created. You will be redirected to the login page in @redirectCountdown seconds...</p>
                    <a href="/login" class="auth-btn">Go to Login</a>
                </div>
            }
            else
            {
                <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration" FormName="register-form">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label for="username" class="form-label">Username</label>
                        <InputText id="username" @bind-Value="registerModel.Username" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.Username)" class="validation-message" />
                    </div>

                    <div class="form-group">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" @bind-Value="registerModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.Email)" class="validation-message" />
                    </div>

                    <div class="form-group">
                        <label for="password" class="form-label">Password</label>
                        <InputText type="password" id="password" @bind-Value="registerModel.Password" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.Password)" class="validation-message" />
                        <small class="text-muted">Password must be at least 6 characters long.</small>
                    </div>

                    <div class="form-group">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <InputText type="password" id="confirmPassword" @bind-Value="registerModel.ConfirmPassword" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="validation-message" />
                    </div>

                    <button type="submit" class="auth-btn" disabled="@isRegistering">
                        @if (isRegistering)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span> Registering...</span>
                        }
                        else
                        {
                            <span>Register</span>
                        }
                    </button>
                </EditForm>

                <div class="auth-footer">
                    <p>Already have an account? <a href="/login">Login</a></p>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .auth-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        background: linear-gradient(135deg, #141414, #333333);
        position: relative;
        overflow: hidden;
    }

    .auth-card {
        width: 100%;
        max-width: 450px;
        background-color: rgba(30, 30, 30, 0.95);
        border-radius: 8px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        overflow: hidden;
        position: relative;
        z-index: 2;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .auth-header {
        background: linear-gradient(45deg, #E50914, #FF6B6B);
        padding: 2rem;
        text-align: center;
        color: white;
        position: relative;
        overflow: hidden;
    }

    .auth-header h3 {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    .auth-header p {
        font-size: 1.1rem;
        opacity: 0.9;
    }

    .auth-body {
        padding: 2rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        color: #ccc;
        font-weight: 500;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        background-color: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 4px;
        color: white;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        outline: none;
        border-color: #E50914;
        background-color: rgba(255, 255, 255, 0.15);
        box-shadow: 0 0 0 2px rgba(229, 9, 20, 0.25);
    }

    .text-muted {
        color: #999 !important;
        font-size: 0.85rem;
        display: block;
        margin-top: 0.25rem;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .form-check-input {
        width: 1.2rem;
        height: 1.2rem;
        background-color: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 3px;
        cursor: pointer;
    }

    .form-check-label {
        color: #ccc;
        cursor: pointer;
    }

    .auth-btn {
        width: 100%;
        padding: 1rem;
        background-color: #E50914;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .auth-btn:hover {
        background-color: #F40612;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }

    .auth-btn:disabled {
        background-color: rgba(229, 9, 20, 0.5);
        cursor: not-allowed;
        transform: none;
    }

    .auth-footer {
        text-align: center;
        padding: 1rem;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        margin-top: 1rem;
    }

    .auth-footer a {
        color: #E50914;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.3s ease;
    }

    .auth-footer a:hover {
        color: #FF6B6B;
    }

    .validation-message {
        color: #FF6B6B;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .alert {
        padding: 1rem;
        border-radius: 4px;
        margin-bottom: 1.5rem;
    }

    .alert-danger {
        background-color: rgba(220, 53, 69, 0.2);
        border: 1px solid rgba(220, 53, 69, 0.3);
        color: #ff8c94;
    }

    .alert-success {
        background-color: rgba(40, 167, 69, 0.2);
        border: 1px solid rgba(40, 167, 69, 0.3);
        color: #8fffb4;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
        border-width: 0.2em;
        display: inline-block;
        vertical-align: text-bottom;
        border: 0.2em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        /* Simple CSS rotation for spinner */
        transform-origin: center;
    }
</style>

@code {
    private RegisterModel registerModel = new();
    private bool isRegistering = false;
    private string errorMessage = string.Empty;
    private bool registrationSuccess = false;
    private int redirectCountdown = 5;
    private bool firstRender = true;

    protected override async Task OnInitializedAsync()
    {
        registrationSuccess = false;
        
        try
        {
            // Use the helper without JS calls during prerendering
            await BlazorInitHelper.EnsureInitialized(JSRuntime, "Register Page", false);
            
            // Force HttpClient initialization safely
            string baseAddress = UserService.GetBaseAddress();
            
            // Force a render cycle
            StateHasChanged();
        }
        catch (Exception)
        {
            // Silent catch during prerendering
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.firstRender = false;
            
            try
            {
                // Now it's safe to make JS calls
                await JSRuntime.InvokeVoidAsync("console.log", "Register page rendered");
                string baseAddress = UserService.GetBaseAddress();
                await JSRuntime.InvokeVoidAsync("console.log", "Register page base address", baseAddress);
            }
            catch (Exception ex)
            {
                // Log error but don't crash
                await JSRuntime.InvokeVoidAsync("console.error", "Register page after-render error", ex.Message);
            }
        }
    }

    private async Task HandleRegistration()
    {
        try
        {
            isRegistering = true;
            errorMessage = string.Empty;
            StateHasChanged();

            // Client-side validation
            if (registerModel.Password != registerModel.ConfirmPassword)
            {
                errorMessage = "Passwords do not match";
                return;
            }

            var response = await UserService.RegisterAsync(
                registerModel.Username,
                registerModel.Email,
                registerModel.Password);

            if (response != null)
            {
                if (response.Success)
                {
                    registrationSuccess = true;
                    await JSRuntime.InvokeVoidAsync("console.log", "Registration successful", response);

                    for (redirectCountdown = 5; redirectCountdown > 0; redirectCountdown--)
                    {
                        StateHasChanged();
                        await Task.Delay(1000);
                    }

                    NavigationManager.NavigateTo("/login");
                }
                else
                {
                    errorMessage = response.Message ?? "Registration failed. Please try again.";
                }
            }
            else
            {
                errorMessage = "Registration failed. Please try again with different credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Registration failed: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.log", "Registration error", ex);
        }
        finally
        {
            isRegistering = false;
            StateHasChanged();
        }
    }
}