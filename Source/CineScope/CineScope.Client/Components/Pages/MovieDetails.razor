@page "/movie/{Id}"
@using CineScope.Client.ClientServices
@using CineScope.Shared.Models
@inject MovieClientService MovieService

<div class="container mt-4">
    @if (movie == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <!-- Movie Poster Column -->
            <div class="col-md-4">
                <img src="@movie.PosterUrl" class="img-fluid rounded" alt="@movie.Title">
            </div>

            <!-- Movie Details Column -->
            <div class="col-md-8">
                <h1>@movie.Title <span class="badge bg-primary">@movie.AverageRating.ToString("0.0")</span></h1>
                <p class="text-muted">
                    Released: @movie.ReleaseDate.ToString("MMMM dd, yyyy") |
                    Director: @movie.Director
                </p>

                <div class="mb-3">
                    @foreach (var genre in movie.Genres)
                    {
                        <span class="badge bg-secondary me-1">@genre</span>
                    }
                </div>

                <h3>Synopsis</h3>
                <p>@movie.Description</p>

                <h3>Cast</h3>
                <p>
                    @string.Join(", ", movie.Actors)
                </p>

                <div class="mt-4">
                    <h3>Reviews (@movie.ReviewCount)</h3>
                    <button class="btn btn-outline-primary" @onclick="LoadReviews">
                        @(showReviews ? "Hide Reviews" : "Show Reviews")
                    </button>
                    <a href="/movie/@movie.Id/review/create" class="btn btn-primary">Write a Review</a>
                </div>

                @if (showReviews)
                {
                    <div class="mt-3">
                        @if (reviews == null)
                        {
                            <p>Loading reviews...</p>
                        }
                        else if (reviews.Count == 0)
                        {
                            <p>No reviews yet. Be the first to review this movie!</p>
                        }
                        else
                        {
                            @foreach (var review in reviews)
                            {
                                <div class="card mb-3">
                                    <div class="card-body">
                                        <h5 class="card-title">
                                            @for (int i = 0; i < review.Rating; i++)
                                            {
                                                <span class="text-warning">★</span>
                                            }
                                            @for (int i = 0; i < 5 - review.Rating; i++)
                                            {
                                                <span class="text-muted">☆</span>
                                            }
                                        </h5>
                                        <p class="card-text">@review.Text</p>
                                        <p class="card-text">
                                            <small class="text-muted">
                                                Posted on @review.CreatedAt.ToString("MMM dd, yyyy")
                                            </small>
                                        </p>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private MovieModel movie;
    private List<ReviewModel> reviews;
    private bool showReviews = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            movie = await MovieService.GetMovieAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading movie: {ex.Message}");
        }
    }

    private async Task LoadReviews()
    {
        showReviews = !showReviews;

        if (showReviews && reviews == null)
        {
            try
            {
                reviews = await MovieService.GetMovieReviewsAsync(Id);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading reviews: {ex.Message}");
                reviews = new List<ReviewModel>();
            }
        }
    }
}