@using CineScope.Shared.DTOs
@using CineScope.Client.Services
@inject NavigationManager NavigationManager
@inject MovieCacheService MovieCache
@inject IJSRuntime JSRuntime

<MudCard Elevation="2" Class="movie-card my-2" Style="height: 100%; max-width: 250px;" @onclick="@(() => GoToMovieDetails())">
    <div class="poster-container" @ref="posterContainer">
        @if (isLoadingPoster)
        {
            <div class="poster-skeleton">
                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
            </div>
        }
        <img src="@currentPosterUrl"
             style="opacity: @(isLoadingPoster ? "0" : "1")"
             alt="@Movie.Title"
             loading="lazy"
             @onload="HandleImageLoaded"
             @onerror="HandleImageError" />
    </div>

    <MudCardContent Class="pa-2">
        <div class="d-flex flex-column gap-1">
            <MudText Typo="Typo.subtitle1" Style="font-size: 1rem; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                @Movie.Title
            </MudText>
            <div class="d-flex justify-space-between align-center">
                <MudText Typo="Typo.caption">@Movie.ReleaseDate.Year</MudText>
                <MudRating ReadOnly="true" SelectedValue="@((int)Math.Round(Movie.AverageRating))" Color="Color.Primary" />
            </div>
            <MudText Typo="Typo.caption" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                @string.Join(", ", Movie.Genres ?? new List<string>())
            </MudText>
        </div>
    </MudCardContent>

    <MudCardActions Class="pa-2 pt-0">
        <MudButton Variant="Variant.Text"
                   Color="Color.Primary"
                   Size="Size.Small"
                   OnClick="@GoToMovieDetails"
                   Class="mr-2">
            Details
        </MudButton>
        <MudButton Variant="Variant.Text"
                   Color="Color.Primary"
                   Size="Size.Small"
                   OnClick="@GoToWriteReview">
            Review
        </MudButton>
    </MudCardActions>
</MudCard>

<style>
    .movie-card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        cursor: pointer;
    }

        .movie-card:hover {
            transform: translateY(-4px);
            box-shadow: var(--mud-elevation-4);
        }

    .poster-container {
        position: relative;
        width: 100%;
        padding-top: 150%; /* 2:3 aspect ratio */
        overflow: hidden;
        background-color: var(--mud-palette-background-grey);
    }

        .poster-container img {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: opacity 0.3s ease-in-out;
        }

    .poster-skeleton {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: var(--mud-palette-background-grey);
    }
</style>

@code {
    [Parameter]
    public MovieDto Movie { get; set; } = new MovieDto();

    private ElementReference posterContainer;
    private string currentPosterUrl = string.Empty;
    private bool isLoadingPoster = true;
    private int loadAttemptCount = 0;
    private const int MAX_LOAD_ATTEMPTS = 2;
    private DotNetObjectReference<MovieCard>? objRef;
    private bool isIntersectionObserverSet = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isIntersectionObserverSet)
        {
            try
            {
                objRef = DotNetObjectReference.Create(this);
                await JSRuntime.InvokeVoidAsync("observeElement", posterContainer, objRef);
                isIntersectionObserverSet = true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error setting up intersection observer: {ex.Message}");
                // Fallback: load the poster immediately
                await LoadPosterUrl();
            }
        }
    }

    [JSInvokable]
    public async Task OnPosterVisible()
    {
        await LoadPosterUrl();
    }

    protected override async Task OnInitializedAsync()
    {
        // Don't load poster here anymore - wait for intersection observer
        currentPosterUrl = $"https://placehold.co/300x450/1a1a1a/white?text={Uri.EscapeDataString(Movie.Title ?? "Loading...")}";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Movie.Id))
        {
            isLoadingPoster = true;
            loadAttemptCount = 0;
            currentPosterUrl = $"https://placehold.co/300x450/1a1a1a/white?text={Uri.EscapeDataString(Movie.Title ?? "Loading...")}";
            StateHasChanged();
        }
    }

    private async Task LoadPosterUrl()
    {
        try
        {
            if (string.IsNullOrEmpty(Movie.PosterUrl))
            {
                currentPosterUrl = $"https://placehold.co/300x450/1a1a1a/white?text={Uri.EscapeDataString(Movie.Title ?? "No Title")}";
                return;
            }

            currentPosterUrl = await MovieCache.GetPosterWithCachingAsync(Movie.Id, Movie.PosterUrl);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading poster for {Movie.Title}: {ex.Message}");
            currentPosterUrl = $"https://placehold.co/300x450/1a1a1a/white?text={Uri.EscapeDataString(Movie.Title ?? "No Title")}";
            StateHasChanged();
        }
    }

    private void HandleImageLoaded()
    {
        isLoadingPoster = false;
        StateHasChanged();
    }

    private async Task HandleImageError()
    {
        loadAttemptCount++;
        
        if (loadAttemptCount < MAX_LOAD_ATTEMPTS)
        {
            await LoadPosterUrl();
        }
        else
        {
            currentPosterUrl = $"https://placehold.co/300x450/1a1a1a/white?text={Uri.EscapeDataString(Movie.Title ?? "No Title")}";
            isLoadingPoster = false;
            StateHasChanged();
        }
    }

    private void GoToMovieDetails()
    {
        NavigationManager.NavigateTo($"/movie/{Movie.Id}");
    }

    private void GoToWriteReview()
    {
        NavigationManager.NavigateTo($"/movie/{Movie.Id}/review");
    }

    public void Dispose()
    {
        try
        {
            if (isIntersectionObserverSet)
            {
                _ = JSRuntime.InvokeVoidAsync("unobserveElement", posterContainer);
            }
            objRef?.Dispose();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error disposing MovieCard: {ex.Message}");
        }
    }
}