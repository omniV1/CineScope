@using CineScope.Shared.DTOs
@using CineScope.Client.Services
@inject NavigationManager NavigationManager
@inject MoviePosterCacheService PosterCache
@inject IJSRuntime JSRuntime

<MudCard Elevation="2" Class="movie-card my-4" Style="height: 100%;">
    <!-- Using container div for the poster to avoid layout shifts -->
    <div class="poster-container" style="position: relative; width: 100%; padding-top: 150%; overflow: hidden;">
        <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;">
            @if (isLoadingPoster)
            {
                <!-- Show skeleton loader while image is loading -->
                <div class="poster-skeleton">
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                </div>
            }

            <!-- The poster image with visibility toggled based on loading state -->
            <img src="@posterUrl"
                 style="width: 100%; height: 100%; object-fit: cover; visibility: @(isLoadingPoster ? "hidden" : "visible");"
                 alt="@Movie.Title"
                 loading="lazy"
                 @onload="HandleImageLoaded"
                 @onerror="HandleImageError" />
        </div>
    </div>

    <MudCardContent Class="pt-3 pb-3">
        <MudText Typo="Typo.h5" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@Movie.Title</MudText>
        <MudText Typo="Typo.body2" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
            @string.Join(", ", Movie.Genres ?? new List<string>()) | @Movie.ReleaseDate.Year
        </MudText>
        <MudRating ReadOnly="true"
                   Value="@((int)Math.Round(Movie.AverageRating))"
                   SelectedValue="@((int)Math.Round(Movie.AverageRating))"
                   Color="Color.Primary" />
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Text" Color="Color.Primary"
                   OnClick="@GoToMovieDetails" aria-label="Learn More">
            Learn More
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                   OnClick="@GoToWriteReview">
            Review
        </MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    public MovieDto Movie { get; set; } = new MovieDto();

    private string posterUrl = string.Empty;
    private bool isLoadingPoster = true;
    private bool posterLoadAttempted = false;
    private int loadAttemptCount = 0;
    private const int MAX_LOAD_ATTEMPTS = 2;

    /// <summary>
    /// Initialize the component and set up the poster URL from cache
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await LoadPosterFromCache();
    }

    /// <summary>
    /// Loads the poster URL from cache or sets a fallback
    /// </summary>
    private async Task LoadPosterFromCache()
    {
        try
        {
            isLoadingPoster = true;

            // Get the original poster URL or a valid fallback
            string originalUrl = GetOriginalPosterUrl();

            // Try to get the cached URL
            posterUrl = await PosterCache.GetPosterUrlAsync(Movie.Id, originalUrl);

            // For genre-based fallbacks, register them with the cache service
            if (Movie.Genres != null && Movie.Genres.Any())
            {
                string fallbackUrl = string.Empty;

                if (Movie.Genres.Contains("Action"))
                    fallbackUrl = "https://cdn.pixabay.com/photo/2015/03/11/01/43/movie-667986_1280.jpg";
                else if (Movie.Genres.Contains("Drama"))
                    fallbackUrl = "https://cdn.pixabay.com/photo/2016/01/22/08/01/theater-1155201_1280.jpg";
                else if (Movie.Genres.Contains("Sci-Fi"))
                    fallbackUrl = "https://cdn.pixabay.com/photo/2017/07/15/19/42/manipulation-2507330_1280.jpg";

                if (!string.IsNullOrEmpty(fallbackUrl))
                {
                    await PosterCache.SetFallbackUrlAsync(Movie.Id, fallbackUrl);
                }
            }

            Console.WriteLine($"Poster URL for {Movie.Title}: {posterUrl}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading poster from cache: {ex.Message}");
            posterUrl = GetOriginalPosterUrl(); // Fall back to regular method
        }
    }

    /// <summary>
    /// Handles successful image loading
    /// </summary>
    private async Task HandleImageLoaded()
    {
        // Record successful load in cache
        await PosterCache.RecordPosterLoadResultAsync(Movie.Id, true);

        isLoadingPoster = false;
        posterLoadAttempted = true;

        // Force re-render
        StateHasChanged();

        Console.WriteLine($"Poster loaded successfully for {Movie.Title}");
    }

    /// <summary>
    /// Handles image loading errors
    /// </summary>
    private async Task HandleImageError()
    {
        Console.WriteLine($"Poster load error for {Movie.Title}");

        loadAttemptCount++;

        if (loadAttemptCount < MAX_LOAD_ATTEMPTS)
        {
            // Try a fallback URL
            string fallbackUrl = string.Empty;

            // Default fallback image
            fallbackUrl = "https://via.placeholder.com/300x450?text=" + Uri.EscapeDataString(Movie.Title ?? "No Title");

            // Update poster URL and try again
            posterUrl = fallbackUrl;

            // Record the failure
            await PosterCache.RecordPosterLoadResultAsync(Movie.Id, false);

            // Force re-render to try the new URL
            StateHasChanged();
        }
        else
        {
            // Give up after MAX_LOAD_ATTEMPTS
            isLoadingPoster = false;
            posterLoadAttempted = true;

            // Record the failure
            await PosterCache.RecordPosterLoadResultAsync(Movie.Id, false);

            // Display a placeholder via CSS background instead of img
            await JSRuntime.InvokeVoidAsync("eval", $@"
                document.querySelector('[data-movie-id=""{Movie.Id}""] .poster-container').style.backgroundColor = '#1a1a1a';
                document.querySelector('[data-movie-id=""{Movie.Id}""] .poster-container').innerHTML =
                    '<div style=""display: flex; height: 100%; justify-content: center; align-items: center; text-align: center; padding: 20px; color: #f5f5f1;"">' +
                    '<div><div>Poster Unavailable</div><h3>{Movie.Title}</h3></div></div>';
            ");

            StateHasChanged();
        }
    }

    /// <summary>
    /// Gets the original poster URL from the movie data or a default
    /// </summary>
    private string GetOriginalPosterUrl()
    {
        // Check if the URL from the database seems valid
        if (!string.IsNullOrEmpty(Movie.PosterUrl) &&
            (Movie.PosterUrl.StartsWith("http://") || Movie.PosterUrl.StartsWith("https://")))
        {
            return Movie.PosterUrl;
        }

        // Default fallback image
        return "https://via.placeholder.com/300x450?text=" + Uri.EscapeDataString(Movie.Title ?? "No Title");
    }

    /// <summary>
    /// Navigates to the movie details page
    /// </summary>
    private void GoToMovieDetails()
    {
        NavigationManager.NavigateTo($"/movie/{Movie.Id}");
    }

    /// <summary>
    /// Navigates to the movie details page with the review form open
    /// </summary>
    private void GoToWriteReview()
    {
        // Navigate to movie details with a query parameter to open the review form
        NavigationManager.NavigateTo($"/movie/{Movie.Id}?action=review");
    }
}

<style>
    /* Image loading transition styles */
    .poster-container img {
        transition: opacity 0.3s ease-in-out;
    }

    .poster-skeleton {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
        background-color: #333;
    }
</style>