@using CineScope.Shared.DTOs
@using System.Net.Http.Json
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" />
            Edit Review for "@MovieTitle"
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <!-- Rating section with improved visual feedback -->
            <div class="d-flex flex-column gap-2 mb-4">
                <MudText Typo="Typo.subtitle1" Class="d-flex align-center">
                    <MudIcon Icon="@Icons.Material.Filled.Star" Class="mr-2" Color="Color.Warning" />
                    Your Rating
                </MudText>
                <div class="d-flex align-center">
                    <MudRating Value="@ratingValue" ValueChanged="@((int value) => ratingValue = value)" 
                              MaxValue="5" Color="Color.Warning" Size="Size.Large" />
                    <MudText Typo="Typo.body2" Class="ml-4">
                        @(ratingValue switch
                        {
                            1 => "Poor",
                            2 => "Fair",
                            3 => "Good",
                            4 => "Very Good",
                            5 => "Excellent",
                            _ => "Select a rating"
                        })
                    </MudText>
                </div>
            </div>

            <!-- Review text with character counter and validation -->
            <MudTextField T="string" Label="Your Review" @bind-Value="reviewText"
                          Required="true" RequiredError="Review text is required"
                          Variant="Variant.Outlined" Lines="5"
                          Counter="1000" MaxLength="1000"
                          Immediate="true"
                          HelperText="Share your thoughts about the movie"
                          Class="mb-4" />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4" Dense="true" Elevation="0">
                    @errorMessage
                </MudAlert>
            }

            @if (contentWarning != null && contentWarning.Any())
            {
                <MudAlert Severity="Severity.Warning" Class="mb-4" Elevation="0">
                    <MudText>Content Warning</MudText>
                    <MudText Typo="Typo.body2">
                        Your review contains content that may violate our community guidelines.
                        Please remove the following terms: @string.Join(", ", contentWarning)
                    </MudText>
                </MudAlert>
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="Cancel" DisableElevation>Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitChanges" 
                   Disabled="@(isLoading || !success || ratingValue == 0)" DisableElevation>
            @if (isLoading)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Saving...</MudText>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Save" Class="mr-2" />
                <MudText>Save Changes</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private MudForm form;
    private bool success;
    private string[] errors = Array.Empty<string>();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private List<string> contentWarning = null;

    // Component parameters
    [Parameter] public ReviewDto Review { get; set; } = new ReviewDto();
    [Parameter] public string MovieTitle { get; set; } = string.Empty;

    // Local state - change type from double to int
    private int ratingValue;
    private string reviewText;

    /// <summary>
    /// Initializes component data when parameters set
    /// </summary>
    protected override void OnParametersSet()
    {
        // Set initial values from the review parameter
        ratingValue = (int)Math.Round(Review.Rating);
        reviewText = Review.Text;
        Console.WriteLine($"EditReview initialized with rating: {ratingValue}");
    }

    /// <summary>
    /// Cancels the edit operation
    /// </summary>
    private void Cancel()
    {
        MudDialog.Cancel();
    }

    /// <summary>
    /// Validates review content against banned word list
    /// </summary>
    private async Task<bool> ValidateContent()
    {
        try
        {
            // Call the content filter API
            var response = await Http.PostAsJsonAsync("api/ContentFilter/validate", reviewText);

            if (response.IsSuccessStatusCode)
            {
                // Parse the response
                var result = await response.Content.ReadFromJsonAsync<ContentFilterResult>();

                // If content is approved, return true
                if (result.IsApproved)
                {
                    contentWarning = null;
                    return true;
                }

                // If content is not approved, store the violation words
                contentWarning = result.ViolationWords;
                return false;
            }

            throw new Exception("Failed to validate content");
        }
        catch (Exception ex)
        {
            // Log the error (in a real app)
            Console.WriteLine($"Content validation error: {ex.Message}");

            // For testing purposes, allow content in case of API failure
            return true;
        }
    }

    /// <summary>
    /// Submits the review updates after validation
    /// </summary>
    private async Task SubmitChanges()
    {
        // Validate the form
        await form.Validate();

        if (!success)
        {
            return;
        }

        // Check if user has selected a rating
        if (ratingValue == 0)
        {
            errorMessage = "Please select a rating";
            return;
        }

        try
        {
            // Set loading state
            isLoading = true;
            errorMessage = string.Empty;

            // First, validate content against banned word list
            if (!await ValidateContent())
            {
                errorMessage = "Review contains inappropriate content. Please revise.";
                Snackbar.Add(errorMessage, Severity.Warning);
                isLoading = false;
                return;
            }

            Console.WriteLine($"Current rating before submitting: {ratingValue}");

            // Prepare updated review
            var updatedReview = new ReviewDto
                {
                    Id = Review.Id,
                    MovieId = Review.MovieId,
                    UserId = Review.UserId,
                    Username = Review.Username,
                    Rating = ratingValue, // This will now be converted from int to double implicitly
                    Text = reviewText,
                    CreatedAt = Review.CreatedAt
                };

            Console.WriteLine($"Submitting updated review with rating: {ratingValue}");
            Console.WriteLine($"Original rating: {Review.Rating}, New rating: {updatedReview.Rating}");

            // Send updated review to the API
            var response = await Http.PutAsJsonAsync($"api/Review/{Review.Id}", updatedReview);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Review successfully updated with rating: {updatedReview.Rating}");
                // Close dialog with success result
                Snackbar.Add("Review updated successfully!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(updatedReview));
            }
            else
            {
                // Handle error response
                errorMessage = "Failed to update review. Please try again.";
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API Error: {errorContent}");
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
            errorMessage = "An error occurred. Please try again.";
            Console.WriteLine($"Exception: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            // Reset loading state
            isLoading = false;
        }
    }

    /// <summary>
    /// Class to represent content filter API response.
    /// </summary>
    private class ContentFilterResult
    {
        public bool IsApproved { get; set; }
        public List<string> ViolationWords { get; set; } = new();
    }
}