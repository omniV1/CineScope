@* This is the registration page where new users can create an account *@
@page "/register"
@using CineScope.Shared.Auth
@using CineScope.Client.Services.Auth
@using CineScope.Client.Services
@using System.ComponentModel.DataAnnotations

@* Import required services *@
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject ISnackbar Snackbar
@inject RecaptchaService RecaptchaService

@* Set the page title *@
<PageTitle>CineScope - Create Account</PageTitle>

@* Main content container *@
<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex justify-center align-center" Style="min-height: calc(100vh - 64px);">
    <MudPaper Elevation="3" Class="pa-8" Style="width: 100%;">
        @* Registration form *@
        <MudForm @ref="form" @bind-IsValid="@success">
            @* Title and subtitle *@
            <MudText Typo="Typo.h4" Class="mb-4">Create Account</MudText>
            <MudText Typo="Typo.subtitle2" Class="mb-4">Join the CineScope community</MudText>

            @* Username field *@
            <MudTextField T="string"
                         @bind-Value="registerRequest.Username"
                         Label="Username"
                         Required="true"
                         RequiredError="Username is required"
                         Validation="@(new Func<string, IEnumerable<string>>(ValidateUsername))"
                         Class="mb-4" />

            @* Email field *@
            <MudTextField T="string"
                         @bind-Value="registerRequest.Email"
                         Label="Email"
                         Required="true"
                         RequiredError="Email is required"
                         Validation="@(new Func<string, IEnumerable<string>>(ValidateEmail))"
                         Class="mb-4" />

            @* Password field *@
            <MudTextField T="string"
                         @bind-Value="registerRequest.Password"
                         Label="Password"
                         Required="true"
                         RequiredError="Password is required"
                         InputType="@(showPassword ? InputType.Text : InputType.Password)"
                         Adornment="Adornment.End"
                         AdornmentIcon="@(showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                         OnAdornmentClick="() => showPassword = !showPassword"
                         Validation="@(new Func<string, IEnumerable<string>>(ValidatePassword))"
                         Class="mb-4" />

            @* Confirm Password field *@
            <MudTextField T="string"
                         @bind-Value="confirmPassword"
                         Label="Confirm Password"
                         Required="true"
                         RequiredError="Please confirm your password"
                         InputType="@(showPassword ? InputType.Text : InputType.Password)"
                         Validation="@(new Func<string, IEnumerable<string>>(ValidateConfirmPassword))"
                         Class="mb-4" />

            @* Error message display *@
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="my-4">@errorMessage</MudAlert>
            }

            @* Register button *@
            <MudButton Variant="Variant.Filled"
                      Color="Color.Primary"
                      Size="Size.Large"
                      FullWidth="true"
                      OnClick="HandleRegistration"
                      Disabled="@(!success || isLoading)">
                @if (isLoading)
                {
                    @* Show loading spinner while processing *@
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Creating Account...</MudText>
                }
                else
                {
                    <MudText>Create Account</MudText>
                }
            </MudButton>

            @* Login link *@
            <div class="d-flex justify-center mt-6">
                <MudText>Already have an account?</MudText>
                <MudLink Href="login" Class="ml-2">Sign in here</MudLink>
            </div>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    // Form and validation
    private MudForm form;
    private bool success;
    private bool isLoading = false;
    private bool showPassword = false;
    private string errorMessage = string.Empty;
    private string confirmPassword = string.Empty;

    // Registration request data
    private RegisterRequest registerRequest = new RegisterRequest();

    // Handle the registration button click
    private async Task HandleRegistration()
    {
        try
        {
            // Show loading state
            isLoading = true;
            errorMessage = string.Empty;

            // Validate the form
            await form.Validate();
            if (!success)
            {
                return;
            }

            // Verify reCAPTCHA
            var recaptchaResponse = await RecaptchaService.ExecuteRecaptchaAsync("register");
            if (string.IsNullOrEmpty(recaptchaResponse))
            {
                errorMessage = "reCAPTCHA verification failed. Please try again.";
                return;
            }

            // Verify the reCAPTCHA token with the server
            var isVerified = await RecaptchaService.VerifyTokenAsync(recaptchaResponse, "register");
            if (!isVerified)
            {
                errorMessage = "reCAPTCHA verification failed. Please try again.";
                return;
            }

            // Attempt to register
            var result = await AuthService.Register(registerRequest);

            if (result.Success)
            {
                // Registration successful - show success message and redirect
                Snackbar.Add("Account created successfully! Welcome to CineScope!", Severity.Success);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                // Show error message if registration failed
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            // Handle any unexpected errors
            errorMessage = "An error occurred during registration. Please try again.";
            Console.WriteLine($"Registration error: {ex.Message}");
        }
        finally
        {
            // Hide loading state
            isLoading = false;
        }
    }

    // Validation functions
    private IEnumerable<string> ValidateUsername(string username)
    {
        if (string.IsNullOrWhiteSpace(username))
            yield return "Username is required";
        else if (username.Length < 3)
            yield return "Username must be at least 3 characters";
        else if (username.Length > 20)
            yield return "Username must not exceed 20 characters";
        else if (!System.Text.RegularExpressions.Regex.IsMatch(username, "^[a-zA-Z0-9_-]+$"))
            yield return "Username can only contain letters, numbers, underscores, and hyphens";
    }

    private IEnumerable<string> ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            yield return "Email is required";
        else if (!new EmailAddressAttribute().IsValid(email))
            yield return "Please enter a valid email address";
    }

    private IEnumerable<string> ValidatePassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
            yield return "Password is required";
        else if (password.Length < 8)
            yield return "Password must be at least 8 characters";
        else if (!password.Any(char.IsUpper))
            yield return "Password must contain at least one uppercase letter";
        else if (!password.Any(char.IsLower))
            yield return "Password must contain at least one lowercase letter";
        else if (!password.Any(char.IsDigit))
            yield return "Password must contain at least one number";
    }

    private IEnumerable<string> ValidateConfirmPassword(string confirmPwd)
    {
        if (string.IsNullOrWhiteSpace(confirmPwd))
            yield return "Please confirm your password";
        else if (confirmPwd != registerRequest.Password)
            yield return "Passwords do not match";
    }
}