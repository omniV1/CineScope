@page "/login"
@using CineScope.Client.Services.Auth
@using CineScope.Client.Services
@using CineScope.Shared.Auth
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject RecaptchaService RecaptchaService
@inject IJSRuntime JSRuntime

<PageTitle>CineScope - Login</PageTitle>

<div class="auth-container">
    <MudPaper Elevation="0" Class="auth-box">
        <MudForm Model="@loginRequest" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudText Typo="Typo.h4" Class="mb-4" Align="Align.Center">Welcome Back</MudText>
            <MudText Typo="Typo.subtitle2" Color="Color.Surface" Class="mb-6" Align="Align.Center">Sign in to continue to CineScope</MudText>

            <MudTextField T="string"
                        Label="Username"
                        @bind-Value="loginRequest.Username"
                        For="@(() => loginRequest.Username)"
                        Required="true"
                        RequiredError="Username is required"
                        Immediate="true"
                        Variant="Variant.Outlined"
                        Attributes="@(new Dictionary<string, object> { { "autocomplete", "username" } })"
                        Class="mb-4" />

            <MudTextField T="string"
                        Label="Password"
                        @bind-Value="loginRequest.Password"
                        For="@(() => loginRequest.Password)"
                        Required="true"
                        RequiredError="Password is required"
                        Immediate="true"
                        Variant="Variant.Outlined"
                        InputType="InputType.Password"
                        Attributes="@(new Dictionary<string, object> { { "autocomplete", "current-password" } })"
                        Class="mb-4" />

            <MudCheckBox T="bool"
                        @bind-Checked="loginRequest.RememberMe"
                        Label="Remember me"
                        Color="Color.Error"
                        Class="mb-4" />

            <div id="loginRecaptcha" class="mb-4"></div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4" Dense="true">@errorMessage</MudAlert>
            }

            <MudButton Variant="Variant.Filled"
                    Color="Color.Error"
                    FullWidth="true"
                    Size="Size.Large"
                    Disabled="@(!success || isLoading)"
                    OnClick="HandleLogin"
                    Class="mb-4">
                @if (isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Signing in...</MudText>
                }
                else
                {
                    <MudText>Sign In</MudText>
                }
            </MudButton>

            <MudText Align="Align.Center">
                Don't have an account? <MudLink Href="/register" Color="Color.Error">Register here</MudLink>
            </MudText>
        </MudForm>
    </MudPaper>
</div>

<link href="css/auth.css" rel="stylesheet" />

@code {
    private MudForm form;
    private bool success;
    private string[] errors = { };
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    /// <summary>
    /// Model for the login form.
    /// </summary>
    private LoginRequest loginRequest = new LoginRequest();

    protected override void OnInitialized()
    {
        // Clear any existing error message when the page loads
        errorMessage = string.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("initializeRecaptcha", "loginRecaptcha");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"reCAPTCHA initialization error: {ex.Message}");
            }
        }
    }

    /// <summary>
    /// Handles the login form submission.
    /// Uses the AuthService for authentication.
    /// </summary>
    private async Task HandleLogin()
    {
        if (isLoading) return;

        await form.Validate();

        if (!success)
        {
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            // Execute reCAPTCHA verification
            var recaptchaToken = await RecaptchaService.ExecuteRecaptchaAsync("login");
            var isVerified = await RecaptchaService.VerifyTokenAsync(recaptchaToken, "login");

            if (!isVerified)
            {
                errorMessage = "Security verification failed. Please try again.";
                Snackbar.Add(errorMessage, Severity.Error);
                return;
            }

            var result = await AuthService.Login(loginRequest);

            if (result.Success)
            {
                // Show success message
                Snackbar.Add("Welcome back!", Severity.Success);

                // Redirect to home page
                NavigationManager.NavigateTo("/");
            }
            else
            {
                // Handle error
                errorMessage = result.Message ?? "Login failed. Please check your credentials.";
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
            errorMessage = "An error occurred during login. Please try again.";
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            // Reset loading state
            isLoading = false;
        }
    }
}