@page "/"
@using MudBlazor
@using CineScope.Shared.DTOs
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager

<!-- Page title for browser tab -->
<PageTitle>CineScope - Your Movie Resource</PageTitle>

<!-- Hero banner section -->
<div class="hero-section" style="background-image: url('@heroBackgroundUrl'); background-size: cover; background-position: center;">
    <div class="hero-content">
        <!-- Main heading -->
        <MudText Typo="Typo.h1" Class="hero-title">Welcome to CineScope</MudText>

        <!-- Subheading -->
        <MudText Typo="Typo.subtitle1" Class="hero-description">
            Discover, review, and discuss your favorite movies with fellow film enthusiasts.
            CineScope provides a platform to share your thoughts and explore new cinematic experiences.
        </MudText>

        <!-- Call to action button -->
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Class="mt-4"
                   Href="/movies">
            Explore Movies
        </MudButton>
    </div>
</div>

<!-- Top Rated Movies section heading -->
<MudText Typo="Typo.h4" Class="mt-8 mb-4">Top Rated Movies</MudText>

@if (isLoadingTopRated)
{
    <div class="d-flex justify-center my-4">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}
else if (topRatedMovies.Count == 0)
{
    <MudAlert Severity="Severity.Info">No top rated movies found.</MudAlert>
}
else
{
    <!-- Top Rated Movies grid -->
    <MudGrid>
        @foreach (var movie in topRatedMovies)
        {
            <MudItem xs="12" sm="6" md="4">
                <!-- Movie card -->
                <MudCard Elevation="4" Class="movie-card" Style="height: 100%;">
                    <!-- Movie poster with standardized aspect ratio -->
                    <div class="poster-container" style="position: relative; width: 100%; padding-top: 150%; overflow: hidden;">
                        <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;">
                            <img src="@GetPosterUrl(movie)" style="width: 100%; height: 100%; object-fit: cover;" alt="@movie.Title" />
                        </div>
                    </div>

                    <!-- Movie details -->
                    <MudCardContent Class="pt-3 pb-3">
                        <MudText Typo="Typo.h5" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@movie.Title</MudText>
                        <MudText Typo="Typo.body2" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                            @string.Join(", ", movie.Genres ?? new List<string>()) | @movie.ReleaseDate.Year
                        </MudText>
                        <MudRating ReadOnly="true" SelectedValue="@((int)Math.Round(movie.AverageRating))" />
                    </MudCardContent>

                    <!-- Card actions -->
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary"
                                   Href="@($"/movie/{movie.Id}")">Learn More</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Secondary">Review</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

<!-- Divider between sections -->
<MudDivider Class="my-8" />

<!-- Recently Added section heading -->
<MudText Typo="Typo.h4" Class="mb-4">Recently Added</MudText>

@if (isLoadingRecent)
{
    <div class="d-flex justify-center my-4">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}
else if (recentlyAddedMovies.Count == 0)
{
    <MudAlert Severity="Severity.Info">No recently added movies found.</MudAlert>
}
else
{
    <!-- Recently Added Movies grid -->
    <MudGrid>
        @foreach (var movie in recentlyAddedMovies)
        {
            <MudItem xs="12" sm="6" md="4">
                <!-- Movie card -->
                <MudCard Elevation="4" Class="movie-card" Style="height: 100%;">
                    <!-- Movie poster with standardized aspect ratio -->
                    <div class="poster-container" style="position: relative; width: 100%; padding-top: 150%; overflow: hidden;">
                        <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;">
                            <img src="@GetPosterUrl(movie)" style="width: 100%; height: 100%; object-fit: cover;" alt="@movie.Title" />
                        </div>
                    </div>

                    <!-- Movie details -->
                    <MudCardContent Class="pt-3 pb-3">
                        <MudText Typo="Typo.h5" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@movie.Title</MudText>
                        <MudText Typo="Typo.body2" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                            @string.Join(", ", movie.Genres ?? new List<string>()) | @movie.ReleaseDate.Year
                        </MudText>
                        <MudRating ReadOnly="true" SelectedValue="@((int)Math.Round(movie.AverageRating))" />
                    </MudCardContent>

                    <!-- Card actions -->
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary"
                                   Href="@($"/movie/{movie.Id}")">Learn More</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Secondary">Review</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    /// <summary>
    /// URL for the hero section background image.
    /// </summary>
    private string heroBackgroundUrl = "https://m.media-amazon.com/images/M/MV5BNDkwY2I3ZWQtZGYxMC00N2QyLTg2MmQtZTU5ZTY0Y2M0YTY4XkEyXkFqcGdeQXVyMjMxOTE0ODA@._V1_.jpg";

    private List<MovieDto> topRatedMovies = new List<MovieDto>();
    private List<MovieDto> recentlyAddedMovies = new List<MovieDto>();

    private bool isLoadingTopRated = true;
    private bool isLoadingRecent = true;

  
    /// <summary>
    /// Initialize component and load movie data from the API.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await LoadTopRatedMovies();
        await LoadRecentMovies();
    }

    /// <summary>
    /// Loads the top rated movies from the API.
    /// </summary>
    private async Task LoadTopRatedMovies()
    {
        try
        {
            isLoadingTopRated = true;

            // Call the API to get all movies
            var response = await Http.GetAsync("/api/Movie");

            if (response.IsSuccessStatusCode)
            {
                var allMovies = await response.Content.ReadFromJsonAsync<List<MovieDto>>() ?? new List<MovieDto>();

                // Take the top 3 highest rated movies
                topRatedMovies = allMovies
                    .OrderByDescending(m => m.AverageRating)
                    .Take(3)
                    .ToList();

                Console.WriteLine($"Loaded {topRatedMovies.Count} top rated movies");
            }
            else
            {
                Console.WriteLine($"Failed to load top rated movies: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading top rated movies: {ex.Message}");
        }
        finally
        {
            isLoadingTopRated = false;
        }
    }

    /// <summary>
    /// Loads the recently added movies from the API.
    /// </summary>
    private async Task LoadRecentMovies()
    {
        try
        {
            isLoadingRecent = true;

            // Call the API to get all movies
            var response = await Http.GetAsync("/api/Movie");

            if (response.IsSuccessStatusCode)
            {
                var allMovies = await response.Content.ReadFromJsonAsync<List<MovieDto>>() ?? new List<MovieDto>();

                // Take the 3 most recent movies based on release date
                recentlyAddedMovies = allMovies
                    .OrderByDescending(m => m.ReleaseDate)
                    .Take(3)
                    .ToList();

                Console.WriteLine($"Loaded {recentlyAddedMovies.Count} recent movies");
            }
            else
            {
                Console.WriteLine($"Failed to load recent movies: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading recent movies: {ex.Message}");
        }
        finally
        {
            isLoadingRecent = false;
        }
    }

    /// <summary>
    /// Gets a poster URL for a movie, with fallbacks for missing posters
    /// </summary>
    private string GetPosterUrl(MovieDto movie)
    {
        

        // Check if the URL from the database seems valid
        if (!string.IsNullOrEmpty(movie.PosterUrl) &&
            (movie.PosterUrl.StartsWith("http://") || movie.PosterUrl.StartsWith("https://")))
        {
            return movie.PosterUrl;
        }

        // Fallback for specific movie genres
        if (movie.Genres != null && movie.Genres.Any())
        {
            if (movie.Genres.Contains("Action"))
                return "https://cdn.pixabay.com/photo/2015/03/11/01/43/movie-667986_1280.jpg";
            if (movie.Genres.Contains("Drama"))
                return "https://cdn.pixabay.com/photo/2016/01/22/08/01/theater-1155201_1280.jpg";
            if (movie.Genres.Contains("Sci-Fi"))
                return "https://cdn.pixabay.com/photo/2017/07/15/19/42/manipulation-2507330_1280.jpg";
        }

        // Default fallback image
        return "https://via.placeholder.com/300x450?text=" + Uri.EscapeDataString(movie.Title ?? "No Title");
    }
}