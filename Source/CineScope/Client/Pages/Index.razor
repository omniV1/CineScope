@* This is the home page of CineScope - the first page users see when they visit the site *@
@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using CineScope.Client.Services
@using CineScope.Shared.DTOs
@using CineScope.Client.Components.Movies
@using System.Net.Http.Json
@using MudBlazor
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject MovieCacheService MovieCache

<PageTitle>CineScope - Discover Movies</PageTitle>

@* Main content container *@
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @* Hero section with welcome message and search *@
    <MudPaper Elevation="3" Class="pa-8 mb-8" Style="background: linear-gradient(135deg, var(--mud-palette-primary) 0%, var(--mud-palette-primary-darken) 100%);">
        <MudGrid>
            <MudItem xs="12" sm="8">
                @* Welcome message *@
                <MudText Typo="Typo.h3" Color="Color.Surface" Class="mb-4">Welcome to CineScope</MudText>
                <MudText Typo="Typo.body1" Color="Color.Surface" Class="mb-8">
                    Discover new movies, share your thoughts, and join the conversation.
                </MudText>
                
                @* Search box *@
                <MudTextField @bind-Value="searchQuery" 
                            Label="Search movies..." 
                            Variant="Variant.Outlined"
                            Adornment="Adornment.End"
                            AdornmentIcon="@Icons.Material.Filled.Search"
                            OnAdornmentClick="SearchMovies"
                            Class="mt-3"
                            Style="background-color: var(--mud-palette-surface);"
                            @onkeyup="@(e => { if (e.Key == "Enter") { SearchMovies(); }})" />
            </MudItem>
        </MudGrid>
    </MudPaper>

    @* Loading state *@
    @if (isLoading)
    {
        <div class="d-flex justify-center my-4">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </div>
    }
    else
    {
        @* Featured Movies Section *@
        @if (featuredMovies != null && featuredMovies.Any())
        {
            <MudText Typo="Typo.h5" Class="mb-4">Featured Movies</MudText>
            <MudGrid>
                @foreach (var movie in featuredMovies.Take(4))
                {
                    <MudItem xs="12" sm="6" md="3">
                        @* Movie card component *@
                        <MudCard Class="movie-card" @onclick="@(() => NavigateToMovie(movie.Id))">
                            @* Movie poster *@
                            <MudCardMedia Image="@GetPosterUrl(movie.PosterPath)" 
                                         Height="400" 
                                         Style="background-size: cover; background-position: center;" />
                            <MudCardContent>
                                @* Movie title *@
                                <MudText Typo="Typo.h6" Class="mt-3">@movie.Title</MudText>
                                @* Release year *@
                                <MudText Typo="Typo.body2">@movie.ReleaseDate.Year</MudText>
                                @* Rating display *@
                                <div class="d-flex align-center mt-2">
                                    <MudRating ReadOnly="true" SelectedValue="@((int)Math.Round(movie.Rating))" />
                                    <MudText Typo="Typo.body2" Class="ml-2">@movie.Rating.ToString("F1")</MudText>
                                </div>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }

        @* Recent Reviews Section *@
        @if (recentReviews != null && recentReviews.Any())
        {
            <MudDivider Class="my-6" />
            <MudText Typo="Typo.h5" Class="mb-4">Recent Reviews</MudText>
            <MudGrid>
                @foreach (var review in recentReviews.Take(3))
                {
                    <MudItem xs="12" sm="6" md="4">
                        @* Review card *@
                        <MudCard Class="review-card">
                            <MudCardHeader>
                                <CardHeaderAvatar>
                                    @* Reviewer's profile picture *@
                                    <MudAvatar Color="Color.Secondary">
                                        @review.Username.FirstOrDefault()
                                    </MudAvatar>
                                </CardHeaderAvatar>
                                <CardHeaderContent>
                                    @* Reviewer's name and movie title *@
                                    <MudText Typo="Typo.body1">@review.Username</MudText>
                                    <MudText Typo="Typo.body2">reviewed @review.MovieTitle</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    @* Review rating *@
                                    <MudRating ReadOnly="true" SelectedValue="@((int)review.Rating)" Size="Size.Small" />
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                @* Review text *@
                                <MudText Typo="Typo.body2" Style="overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical;">
                                    @review.Text
                                </MudText>
                            </MudCardContent>
                            <MudCardActions>
                                @* Link to full review *@
                                <MudButton Variant="Variant.Text" Color="Color.Primary" 
                                          @onclick="@(() => NavigateToMovie(review.MovieId))">
                                    Read More
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
    }
</MudContainer>

@code {
    // Properties to store page data
    private bool isLoading = true;
    private string searchQuery = "";
    private List<MovieDto> featuredMovies;
    private List<ReviewDto> recentReviews;

    // Load data when the page first loads
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load featured movies and recent reviews simultaneously
            var featuredTask = LoadFeaturedMovies();
            var reviewsTask = LoadRecentReviews();
            await Task.WhenAll(featuredTask, reviewsTask);
        }
        catch (Exception ex)
        {
            // Show error message if something goes wrong
            Snackbar.Add("Error loading content: " + ex.Message, Severity.Error);
        }
        finally
        {
            // Hide loading spinner
            isLoading = false;
        }
    }

    // Load the featured movies from the server
    private async Task LoadFeaturedMovies()
    {
        try
        {
            // Get featured movies from the API
            var response = await Http.GetAsync("api/Movie/featured");
            if (response.IsSuccessStatusCode)
            {
                featuredMovies = await response.Content.ReadFromJsonAsync<List<MovieDto>>();
            }
            else
            {
                throw new Exception($"Error: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Show error message if loading fails
            Snackbar.Add($"Failed to load featured movies: {ex.Message}", Severity.Error);
            featuredMovies = new List<MovieDto>();
        }
    }

    // Load recent reviews from the server
    private async Task LoadRecentReviews()
    {
        try
        {
            // Get recent reviews from the API
            var response = await Http.GetAsync("api/Review/recent");
            if (response.IsSuccessStatusCode)
            {
                recentReviews = await response.Content.ReadFromJsonAsync<List<ReviewDto>>();
            }
            else
            {
                throw new Exception($"Error: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Show error message if loading fails
            Snackbar.Add($"Failed to load recent reviews: {ex.Message}", Severity.Error);
            recentReviews = new List<ReviewDto>();
        }
    }

    // Handle movie search
    private void SearchMovies()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            // Navigate to movies page with search query
            NavigationManager.NavigateTo($"/movies?search={Uri.EscapeDataString(searchQuery)}");
        }
    }

    // Navigate to a specific movie's details page
    private void NavigateToMovie(string movieId)
    {
        NavigationManager.NavigateTo($"/movies/{movieId}");
    }

    // Get the full URL for a movie poster
    private string GetPosterUrl(string posterPath)
    {
        return !string.IsNullOrEmpty(posterPath) 
            ? $"/poster-cache/{posterPath}" 
            : "/images/no-poster.png";
    }
}