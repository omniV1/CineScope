@page "/movies"
@using CineScope.Shared.DTOs
@using System.Net.Http.Json
@inject HttpClient Http
@inject ISnackbar Snackbar
@using CineScope.Client.Components.Movies

<PageTitle>CineScope - Movies</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <!-- Header with search and filter controls -->
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="pb-4">
                <MudText Typo="Typo.h4" Class="mb-4">Browse Movies</MudText>

                <MudGrid>
                    <!-- Search Box -->
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="searchTerm" Label="Search Movies" 
                                     Variant="Variant.Outlined" Adornment="Adornment.End"
                                     AdornmentIcon="@Icons.Material.Filled.Search" 
                                     IconSize="Size.Medium" aria-label="Search Movies" 
                                     OnKeyDown="@HandleSearchKeyDown" 
                                     Class="mt-0" />
                    </MudItem>

                    <!-- Genre Filter -->
                    <MudItem xs="12" sm="6" md="2">
                        <MudSelect T="string" Label="Genre" Variant="Variant.Outlined"
                                 @bind-Value="selectedGenre" Dense="true" 
                                 aria-label="Select Genre" Class="mt-0">
                            <MudSelectItem Value="@string.Empty">All Genres</MudSelectItem>
                            @foreach (var genre in genres)
                            {
                                <MudSelectItem Value="@genre">@genre</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <!-- Filter Button -->
                    <MudItem xs="6" sm="4" md="2">
                        <MudButton FullWidth="true" Variant="Variant.Outlined" Color="Color.Primary"
                                 OnClick="@ShowFilterDialog" StartIcon="@Icons.Material.Filled.FilterList"
                                 aria-label="Filter Options" Class="mt-1">
                            Filters
                        </MudButton>
                    </MudItem>

                    <!-- Sort Button -->
                    <MudItem xs="6" sm="4" md="2">
                        <MudMenu Label="Sort" Variant="Variant.Outlined" FullWidth="true"
                              EndIcon="@Icons.Material.Filled.Sort" aria-label="Sort Options"
                              Class="mt-1">
                            <MudMenuItem OnClick="@(() => ApplySort("date_desc"))">
                                Newest First
                            </MudMenuItem>
                            <MudMenuItem OnClick="@(() => ApplySort("rating_desc"))">
                                Rating (High to Low)
                            </MudMenuItem>
                            <MudMenuItem OnClick="@(() => ApplySort("title_asc"))">
                                Title (A-Z)
                            </MudMenuItem>
                        </MudMenu>
                    </MudItem>

                    <!-- Search Button -->
                    <MudItem xs="12" sm="4" md="2">
                        <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary"
                                 OnClick="@SearchMovies" aria-label="Search" Class="mt-1">
                            Search
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>

        <!-- Active Filters Display -->
        @if (!string.IsNullOrEmpty(selectedGenre) || minimumRating > 1)
        {
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="pa-4 mb-4" Style="background-color: var(--mud-palette-background-grey)">
                    <MudText Typo="Typo.subtitle1">Active Filters:</MudText>
                    <div class="d-flex flex-wrap gap-2 mt-2">
                        @if (!string.IsNullOrEmpty(selectedGenre))
                        {
                            <MudChip Color="Color.Primary" OnClose="@(() => ClearGenreFilter())">
                                Genre: @selectedGenre
                            </MudChip>
                        }
                        @if (minimumRating > 1)
                        {
                            <MudChip Color="Color.Secondary" OnClose="@(() => ClearRatingFilter())">
                                Rating: @minimumRating+ Stars
                            </MudChip>
                        }
                        <MudButton Variant="Variant.Text" Color="Color.Error" 
                                 OnClick="@ClearAllFilters" Size="Size.Small">
                            Clear All
                        </MudButton>
                    </div>
                </MudPaper>
            </MudItem>
        }

      <MudItem xs="12">
    @if (isLoading)
    {
        <div class="d-flex justify-center my-8">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (displayedMovies.Count == 0)
    {
        <MudAlert Severity="Severity.Info" Class="my-4">
            No movies found. Try adjusting your search or filters.
        </MudAlert>
    }
    else
    {
        <MudText Class="mb-4">Found @displayedMovies.Count movies</MudText>
        <MudGrid>
            @foreach (var movie in displayedMovies)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MovieCard Movie="@movie" />
                </MudItem>
            }
        </MudGrid>
    }
</MudItem>
    </MudGrid>
</MudContainer>

@code {
    // State for movies and display
    private List<MovieDto> allMovies = new List<MovieDto>();
    private List<MovieDto> displayedMovies = new List<MovieDto>();
    private bool isLoading = true;
    
    // Filter/search state
    private string searchTerm = string.Empty;
    private string selectedGenre = string.Empty;
    private int minimumRating = 1;
    public string CurrentSortOption { get; private set; } = "date_desc"; // Default sort
    
    // Available options
    private List<string> genres = new List<string> { 
        "Action", "Comedy", "Drama", "Horror", "Sci-Fi", "Thriller", "Romance", "Animation"
    };

    /// <summary>
    /// Initialize component and load movie data
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await LoadMovies();
    }

    /// <summary>
    /// Loads movies from the API with current filter parameters
    /// </summary>
    private async Task LoadMovies()
    {
        try
        {
            isLoading = true;
            Console.WriteLine("Loading movies...");

            // API call with correct URL
            var response = await Http.GetAsync("/api/Movie");

            Console.WriteLine($"Response status: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                // Parse movies from response
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Response content: {content}");

                allMovies = await response.Content.ReadFromJsonAsync<List<MovieDto>>() ?? new List<MovieDto>();
                displayedMovies = allMovies;

                Console.WriteLine($"Loaded {displayedMovies.Count} movies");
            }
            else
            {
                // Show the error details
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error from server: {error}");
                Snackbar.Add($"Failed to load movies: {error}", Severity.Error);

                allMovies = new List<MovieDto>();
                displayedMovies = new List<MovieDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);

            allMovies = new List<MovieDto>();
            displayedMovies = new List<MovieDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Make sure UI refreshes
        }
    }

    /// <summary>
    /// Shows the filter dialog for additional options like rating
    /// </summary>
    private void ShowFilterDialog()
    {
        // In a full implementation, this would open a dialog with additional filter options
        // For this test sample, we'll set minimum rating directly
        var options = new DialogOptions { CloseOnEscapeKey = true };
        
        var parameters = new DialogParameters
        {
            ["CurrentRating"] = minimumRating
        };
        
        // This would be implemented in a real app with a dialog component
        // Instead, we'll just simulate setting the minimum rating for testing
        SetRatingFilter(4); // For testing, set to 4 stars
    }

    /// <summary>
    /// Sets the minimum rating filter value
    /// </summary>
    public void SetRatingFilter(int rating)
    {
        minimumRating = rating;
    }

    /// <summary>
    /// Applies sorting option and refreshes movies
    /// </summary>
    private async Task ApplySort(string sortOption)
    {
        CurrentSortOption = sortOption;
        await LoadMovies();
    }

    /// <summary>
    /// Handles search when Enter key is pressed
    /// </summary>
    private async Task HandleSearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchMovies();
        }
    }

    /// <summary>
    /// Executes search with current filters
    /// </summary>
    private async Task SearchMovies()
    {
        await LoadMovies();
    }

    /// <summary>
    /// Clears the genre filter
    /// </summary>
    private async Task ClearGenreFilter()
    {
        selectedGenre = string.Empty;
        await LoadMovies();
    }

    /// <summary>
    /// Clears the rating filter
    /// </summary>
    private async Task ClearRatingFilter()
    {
        minimumRating = 1;
        await LoadMovies();
    }

    /// <summary>
    /// Clears all active filters
    /// </summary>
    private async Task ClearAllFilters()
    {
        selectedGenre = string.Empty;
        minimumRating = 1;
        searchTerm = string.Empty;
        await LoadMovies();
    }
}