@page "/movies"
@using CineScope.Shared.DTOs
@using System.Net.Http.Json
@inject HttpClient Http
@inject ISnackbar Snackbar
@using CineScope.Client.Components.Movies

<PageTitle>CineScope - Movies</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <!-- Header with search and filter controls -->
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="pb-4">
                <MudText Typo="Typo.h4" Class="mb-4">Browse Movies</MudText>

                <!-- Compact search bar and filters in a single row with perfect alignment -->
                <div class="search-filter-container">
                    <!-- Search Box -->
                    <div class="control-wrapper">
                        <MudTextField @bind-Value="searchTerm" 
                                    Label="Search Movies"
                                    Variant="Variant.Outlined" 
                                    Adornment="Adornment.End"
                                    AdornmentIcon="@Icons.Material.Filled.Search"
                                    IconSize="Size.Medium" 
                                    Style="flex: 1; min-width: 300px;" 
                                    OnKeyDown="@HandleSearchKeyDown" />
                    </div>

                    <!-- Genre Filter -->
                    <div class="control-wrapper" style="margin-left: 8px;">
                        <MudSelect T="string" 
                                Label="Select a Genre" 
                                Value="@selectedGenre" 
                                ValueChanged="@OnGenreChanged"
                                Variant="Variant.Outlined"
                                Style="min-width: 150px;"
                                AnchorOrigin="Origin.BottomCenter">
                            <MudSelectItem Value="@string.Empty">All Genres</MudSelectItem>
                            @foreach (var genre in genres)
                            {
                                    <MudSelectItem Value="@genre">@genre</MudSelectItem>
                            }
                        </MudSelect>
                    </div>

                    <!-- Spacer to push the buttons to the right -->
                    <div style="flex-grow: 1;"></div>

                    <!-- Filters Button -->
                    <div class="control-wrapper">
                        <MudButton Variant="Variant.Outlined" 
                                Color="Color.Error" 
                                OnClick="@ShowFilterDialog" 
                                StartIcon="@Icons.Material.Filled.FilterList"
                                Class="aligned-button">
                            FILTERS
                        </MudButton>
                    </div>

                    <!-- Sort Button with Dropdown -->
                    <div class="control-wrapper" style="margin-left: 8px;">
                        <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" 
                                Label="SORT" 
                                Variant="Variant.Outlined"
                                EndIcon="false"
                                Class="aligned-button"
                                AnchorOrigin="Origin.BottomCenter"
                                TransformOrigin="Origin.TopCenter">
                            <MudMenuItem OnClick="@(() => ApplySort("date_desc"))">
                                Newest First
                            </MudMenuItem>
                            <MudMenuItem OnClick="@(() => ApplySort("rating_desc"))">
                                Rating (High to Low)
                            </MudMenuItem>
                            <MudMenuItem OnClick="@(() => ApplySort("title_asc"))">
                                Title (A-Z)
                            </MudMenuItem>
                        </MudMenu>
                    </div>

                    <!-- Search Button -->
                    <div class="control-wrapper" style="margin-left: 8px;">
                        <MudButton Variant="Variant.Filled" 
                                Color="Color.Error" 
                                OnClick="@SearchMovies" 
                                Class="aligned-button">
                            SEARCH
                        </MudButton>
                    </div>
                </div>
            </MudPaper>
        </MudItem>

        <!-- Active Filters Display -->
        @if (!string.IsNullOrEmpty(selectedGenre) || minimumRating > 1)
        {
                <MudItem xs="12">
                    <MudPaper Elevation="0" Class="pa-4 mb-4" Style="background-color: var(--mud-palette-background-grey)">
                        <MudText Typo="Typo.subtitle1">Active Filters:</MudText>
                        <div class="d-flex flex-wrap gap-2 mt-2">
                        @if (!string.IsNullOrEmpty(selectedGenre))
                        {
                                    <MudChip Color="Color.Error" OnClose="@(() => ClearGenreFilter())">
                                        Genre: @selectedGenre
                                    </MudChip>
                        }
                        @if (minimumRating > 1)
                        {
                                    <MudChip Color="Color.Error" OnClose="@(() => ClearRatingFilter())">
                                        Rating: @minimumRating+ Stars
                                    </MudChip>
                        }
                            <MudButton Variant="Variant.Text" Color="Color.Error"
                                      OnClick="@ClearAllFilters" Size="Size.Small">
                                Clear All
                            </MudButton>
                        </div>
                    </MudPaper>
                </MudItem>
        }

        <MudItem xs="12">
            @if (isLoading)
            {
                    <div class="d-flex justify-center my-8">
                        <MudProgressCircular Color="Color.Error" Indeterminate="true" Size="Size.Large" />
                    </div>
            }
            else if (displayedMovies.Count == 0)
            {
                    <MudAlert Severity="Severity.Info" Class="my-4">
                        <i class="fas fa-exclamation-circle"></i> No movies found. Try adjusting your search or filters.
                    </MudAlert>
            }
            else
            {
                    <MudText Class="mb-4">Found @displayedMovies.Count movies</MudText>
                    <MudGrid>
                    @foreach (var movie in displayedMovies)
                    {
                                <MudItem xs="12" sm="6" md="4" lg="3">
                                    <MovieCard Movie="@movie" />
                                </MudItem>
                    }
                    </MudGrid>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    /* Custom styles to ensure proper alignment */
    .search-filter-container {
        display: flex;
        align-items: center; /* Center align all items vertically */
        flex-wrap: wrap;
        gap: 0;
    }

    /* Wrapper to ensure consistent heights */
    .control-wrapper {
        display: flex;
        align-items: center;
        height: 40px; /* Fixed height for all controls */
    }

    /* Style for buttons to ensure alignment */
    .aligned-button {
        height: 40px;
        text-transform: uppercase;
        margin: 0;
        padding: 0 16px;
    }

    /* Force consistent height on mobile */
    @@media (max-width: 600px) {
        .search-filter-container {
            flex-direction: column;
            align-items: stretch;
        }

        .control-wrapper {
            margin-left: 0 !important;
            margin-bottom: 8px;
            width: 100%;
        }
    }
</style>

@code {
    // State for movies and display
    private List<MovieDto> allMovies = new();
    private List<MovieDto> displayedMovies = new();
    private bool isLoading = true;

    // Filter/search state
    private string searchTerm = string.Empty;
    private string selectedGenre = string.Empty;
    private int minimumRating = 1;
    public string CurrentSortOption { get; private set; } = "date_desc"; // Default sort

    // Available options
    private List<string> genres = new() {
        "Action", "Comedy", "Drama", "Horror", "Sci-Fi", "Thriller", "Romance", "Animation"
    };

    /// <summary>
    /// Initialize component and load movie data
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await LoadMovies();
    }

    /// <summary>
    /// Cycles through sort options when the Sort button is clicked
    /// </summary>
    private async Task CycleSortOptions()
    {
        // Cycle through the sort options in a predefined order
        string nextSort = CurrentSortOption switch
        {
            "date_desc" => "rating_desc",
            "rating_desc" => "title_asc",
            "title_asc" => "date_desc",
            _ => "date_desc" // Default fallback
        };

        // Apply the next sort option
        await ApplySort(nextSort);
    }

    /// <summary>
    /// Loads movies from the API with current filter parameters
    /// This updated method properly handles genre filtering and other criteria
    /// </summary>
    private async Task LoadMovies()
    {
        try
        {
            isLoading = true;
            Console.WriteLine("Loading movies with filters...");

            // Build the query parameters based on current filters
            var queryParams = new List<string>();

            // Add genre filter if selected
            if (!string.IsNullOrEmpty(selectedGenre))
            {
                queryParams.Add($"genre={Uri.EscapeDataString(selectedGenre)}");
            }

            // Add minimum rating filter if set above 1
            if (minimumRating > 1)
            {
                queryParams.Add($"minRating={minimumRating}");
            }

            // Add search term if provided
            if (!string.IsNullOrEmpty(searchTerm))
            {
                queryParams.Add($"search={Uri.EscapeDataString(searchTerm)}");
            }

            // Add sort parameter
            queryParams.Add($"sort={CurrentSortOption}");

            // Build the full URL with query parameters
            string url = "/api/Movie";
            if (queryParams.Any())
            {
                url += "?" + string.Join("&", queryParams);
            }

            Console.WriteLine($"API request URL: {url}");

            // Make the API call
            var response = await Http.GetAsync(url);

            Console.WriteLine($"Response status: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                // Parse movies from response
                allMovies = await response.Content.ReadFromJsonAsync<List<MovieDto>>() ?? new();

                // For this implementation, let's handle the case where we're in development
                // and the server doesn't implement genre filtering yet
                if (IsDevelopmentEnvironment() && !string.IsNullOrEmpty(selectedGenre))
                {
                    Console.WriteLine($"Development environment: Applying genre filter '{selectedGenre}' client-side");
                    allMovies = allMovies
                        .Where(m => m.Genres != null && m.Genres.Contains(selectedGenre, StringComparer.OrdinalIgnoreCase))
                        .ToList();
                }

                // Apply all client-side filters
                ApplyClientSideFilters();

                Console.WriteLine($"Loaded {displayedMovies.Count} movies");
            }
            else
            {
                // Show the error details
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error from server: {error}");
                Snackbar.Add($"Failed to load movies: {error}", Severity.Error);

                // If the API fails, we can still try to filter the movies we already have
                ApplyClientSideFilters();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);

            // If an exception occurs, we can still try to filter the movies we already have
            ApplyClientSideFilters();
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Make sure UI refreshes
        }
    }

    /// <summary>
    /// Checks if we're in a development environment
    /// </summary>
    private bool IsDevelopmentEnvironment()
    {
        // In a real application, you would use configuration to check this
        // For this demo, we'll return true to ensure our client-side filtering works
        return true;
    }

    /// <summary>
    /// Shows the filter dialog for additional options like rating
    /// </summary>
    private void ShowFilterDialog()
    {
        // In a full implementation, this would open a dialog with additional filter options
        // For this test sample, we'll set minimum rating directly
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var parameters = new DialogParameters
            {
                ["CurrentRating"] = minimumRating
            };

        // This would be implemented in a real app with a dialog component
        // Instead, we'll just simulate setting the minimum rating for testing
        SetRatingFilter(4); // For testing, set to 4 stars
    }

    /// <summary>
    /// Sets the minimum rating filter value
    /// </summary>
    public void SetRatingFilter(int rating)
    {
        minimumRating = rating;
        ApplyClientSideFilters();
    }

    /// <summary>
    /// Applies sorting option and refreshes movies
    /// </summary>
    private async Task ApplySort(string sortOption)
    {
        CurrentSortOption = sortOption;
        await LoadMovies();
    }

    /// <summary>
    /// Handles genre selection change
    /// </summary>
    private async Task OnGenreChanged(string genre)
    {
        selectedGenre = genre;
        await LoadMovies();
    }

    /// <summary>
    /// Handles search when Enter key is pressed
    /// </summary>
    private async Task HandleSearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchMovies();
        }
    }

    /// <summary>
    /// Executes search with current filters
    /// </summary>
    private async Task SearchMovies()
    {
        await LoadMovies();
    }

    /// <summary>
    /// Clears the genre filter
    /// </summary>
    private async Task ClearGenreFilter()
    {
        selectedGenre = string.Empty;
        await LoadMovies();
    }

    /// <summary>
    /// Clears the rating filter
    /// </summary>
    private async Task ClearRatingFilter()
    {
        minimumRating = 1;
        await LoadMovies();
    }

    /// <summary>
    /// Clears all active filters
    /// </summary>
    private async Task ClearAllFilters()
    {
        selectedGenre = string.Empty;
        minimumRating = 1;
        searchTerm = string.Empty;
        await LoadMovies();
    }

    /// <summary>
    /// Applies client-side filtering to the movies list
    /// This is a fallback in case the API doesn't support all our filter options
    /// </summary>
    private void ApplyClientSideFilters()
    {
        // Start with all movies
        var filteredMovies = allMovies;

        // Apply genre filter
        if (!string.IsNullOrEmpty(selectedGenre))
        {
            filteredMovies = filteredMovies
                .Where(m => m.Genres != null && m.Genres.Contains(selectedGenre))
                .ToList();
        }

        // Apply rating filter
        if (minimumRating > 1)
        {
            filteredMovies = filteredMovies
                .Where(m => m.AverageRating >= minimumRating)
                .ToList();
        }

        // Apply search term filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filteredMovies = filteredMovies
                .Where(m => m.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        // Apply sort
        filteredMovies = ApplySorting(filteredMovies);

        // Update displayed movies
        displayedMovies = filteredMovies;
    }

    /// <summary>
    /// Applies sorting to the movies list
    /// </summary>
    private List<MovieDto> ApplySorting(List<MovieDto> movies)
    {
        return CurrentSortOption switch
        {
            "date_desc" => movies.OrderByDescending(m => m.ReleaseDate).ToList(),
            "rating_desc" => movies.OrderByDescending(m => m.AverageRating).ToList(),
            "title_asc" => movies.OrderBy(m => m.Title).ToList(),
            _ => movies // Default sort
        };
    }
}