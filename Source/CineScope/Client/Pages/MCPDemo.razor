@page "/mcp"
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Authorization
@using CineScope.Client.Services
@using CineScope.Shared.DTOs
@inject AnthropicService AnthropicService
@inject ISnackbar Snackbar
@using System.Net.Http.Json
@inject HttpClient Http
@inject ILogger<MCPDemo> Logger

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Help & FAQ</MudText>
    <MudText Typo="Typo.subtitle1" Align="Align.Center" Class="mb-8">Get personalized help with all your movie-related questions</MudText>

    <MudGrid>
        <MudItem xs="12" md="8">
            <MudPaper Elevation="3" Class="pa-4 mb-4">
                <MudTextField @bind-Value="UserInput" Label="Ask me anything about movies..." Variant="Variant.Outlined" 
                            FullWidth="true" Immediate="true" Lines="3" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" 
                        OnClick="GetResponseAsync" Class="mt-4" Disabled="@IsLoading">
                    @if (IsLoading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Thinking...</MudText>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.QuestionAnswer" Class="mr-2" />
                        <MudText>Get Help</MudText>
                    }
                </MudButton>
            </MudPaper>

            @if (IsServerStarting)
            {
                <MudAlert Severity="Severity.Info" Class="mb-4">
                    <MudText>Preparing to help you, please wait...</MudText>
                </MudAlert>
            }

            @if (!string.IsNullOrEmpty(Response))
            {
                <MudPaper Elevation="3" Class="pa-4 mb-4">
                    <MudText Typo="Typo.h5" GutterBottom="true">Answer:</MudText>
                    <MudText Style="white-space: pre-wrap;">@Response</MudText>
                </MudPaper>
            }
        </MudItem>

        <MudItem xs="12" md="4">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Common Questions</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudList Clickable="true">
                        <MudListItem OnClick="@(() => SetQuestion("What are the top 3 highest rated movies?"))">
                            <MudText>What are the top rated movies?</MudText>
                        </MudListItem>
                        <MudListItem OnClick="@(() => SetQuestion("Can you recommend some good drama movies?"))">
                            <MudText>What drama movies would you recommend?</MudText>
                        </MudListItem>
                        <MudListItem OnClick="@(() => SetQuestion("Tell me about The Godfather"))">
                            <MudText>Tell me about The Godfather</MudText>
                        </MudListItem>
                        <MudListItem OnClick="@(() => SetQuestion("What fantasy movies are available?"))">
                            <MudText>What fantasy movies are available?</MudText>
                        </MudListItem>
                        <MudListItem OnClick="@(() => SetQuestion("Which movies are similar to The Dark Knight?"))">
                            <MudText>Find movies similar to The Dark Knight</MudText>
                        </MudListItem>
                    </MudList>
                </MudCardContent>
            </MudCard>

            <MudExpansionPanels Class="mt-4">
                <MudExpansionPanel Text="How does this work?">
                    <MudText>
                        <p>
                            This help system uses Claude, an advanced AI, to assist you with movie-related questions. 
                            It has direct access to our movie database, ensuring you get accurate and up-to-date information.
                        </p>
                        <p>
                            You can ask about:
                        </p>
                        <MudList Dense="true">
                            <MudListItem Icon="@Icons.Material.Filled.Search">Finding specific movies</MudListItem>
                            <MudListItem Icon="@Icons.Material.Filled.Recommend">Getting recommendations</MudListItem>
                            <MudListItem Icon="@Icons.Material.Filled.Category">Exploring genres</MudListItem>
                            <MudListItem Icon="@Icons.Material.Filled.Star">Finding top-rated films</MudListItem>
                        </MudList>
                    </MudText>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private string UserInput { get; set; } = "";
    private string Response { get; set; } = "";
    private bool IsLoading { get; set; } = false;
    private bool IsServerStarting { get; set; } = false;

    /// <summary>
    /// Sets a sample question in the input field
    /// </summary>
    private void SetQuestion(string question)
    {
        UserInput = question;
        StateHasChanged();
    }

    /// <summary>
    /// Gets a response from Claude using MCP via server API
    /// </summary>
    private async Task GetResponseAsync()
    {
        if (string.IsNullOrWhiteSpace(UserInput))
            return;

        IsLoading = true;
        IsServerStarting = true;
        Response = "";
        StateHasChanged();

        try
        {
            var request = new { Query = UserInput };
            var response = await Http.PostAsJsonAsync("api/MCP/recommendation", request);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<MCPResponse>();
                if (result != null)
                {
                    Response = result.Response;
                }
                else
                {
                    Response = "I apologize, but I couldn't process your request at the moment. Please try again.";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError($"Error from MCP API: {response.StatusCode}, {errorContent}");
                Response = "I apologize, but I'm having trouble accessing the movie database right now. Please try again in a moment.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error getting response from MCP API");
            Response = "I apologize, but something went wrong. Please try again later.";
        }
        finally
        {
            IsLoading = false;
            IsServerStarting = false;
            StateHasChanged();
        }
    }

    private class MCPResponse
    {
        public string Response { get; set; } = string.Empty;
    }
} 